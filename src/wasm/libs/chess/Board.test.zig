// std import
const std = @import("std");
const builtin = @import("builtin");

// common import
const common = @import("../common/main.zig");
const BitBoard = common.bit_board.BitBoard(8, 8);

// internal import
const main = @import("./main.zig");
const Board = main.Board;
const moves = main.moves;

test "üìñBoard.initWithString: ÊñáÂ≠óÂàó„Åã„Çâ„Éú„Éº„Éâ„ÇíÂàùÊúüÂåñ„Åô„Çã" {
    const board = Board.initWithString(
        \\RNBQKBNR
        \\PPPPPPPP
        \\........
        \\........
        \\........
        \\........
        \\pppppppp
        \\rnbqkbnr
    );

    try board.getBoard(.black, .pawn).expect(
        \\........
        \\oooooooo
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try board.getBoard(.white, .rook).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\o......o
    );
}

test "üìñBoard.filterValidMove: ÊúâÂäπ„Å™Âãï„Åç„Å†„Åë„Çí„Éï„Ç£„É´„Çø„Éº„Åô„Çã" {
    const board_str =
        \\........
        \\...R....
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\...k....
    ;
    const board = Board.initWithString(board_str);
    const from = BitBoard.initWithString(board_str, 'r');
    const to = moves.rook(board, from, .white);

    const actual = board.filterValidMove(from, to);

    try actual.expect(
        \\........
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\........
        \\........
    );
}

test "castling black kingside" {
    const board = Board.initWithString(
        \\....K..R
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_king), true);
}

test "castling black queenside" {
    const board = Board.initWithString(
        \\R...K...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_queen), true);
}

test "castling white kingside" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....k..r
    );

    try std.testing.expectEqual(board.canCastling(.white_king), true);
}

test "castling white queenside" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k...
    );

    try std.testing.expectEqual(board.canCastling(.white_queen), true);
}

test "castling attacked king" {
    const board = Board.initWithString(
        \\....K..R
        \\........
        \\........
        \\........
        \\....r...
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_king), false);
}

test "castling moved king" {
    const board = Board.initWithString(
        \\R.......
        \\....K...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_queen), false);
}

test "castling moved rook" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.......r
        \\........
        \\....k...
    );

    try std.testing.expectEqual(board.canCastling(.white_king), false);
}

test "castling piece between king and rook" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\rn..k...
    );

    try std.testing.expectEqual(board.canCastling(.white_queen), false);
}

test "black king is checked" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\...K....
        \\........
        \\........
        \\...q....
        \\........
    );

    const actual = board.isChecked(.black);
    const expected = true;

    try std.testing.expect(actual == expected);
}

test "black king is not checked" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\...K....
        \\........
        \\........
        \\..q.....
        \\........
    );

    const actual = board.isChecked(.black);
    const expected = false;

    try std.testing.expect(actual == expected);
}

test "white king is checked" {
    const board = Board.initWithString(
        \\........
        \\...R....
        \\........
        \\........
        \\........
        \\........
        \\...k....
        \\........
    );

    const actual = board.isChecked(.white);
    const expected = true;

    try std.testing.expect(actual == expected);
}

test "white king is not checked" {
    const board = Board.initWithString(
        \\........
        \\..R.....
        \\........
        \\........
        \\........
        \\........
        \\...k....
        \\........
    );

    const actual = board.isChecked(.white);
    const expected = false;

    try std.testing.expect(actual == expected);
}

test "black is checked and cannot move" {
    const board = Board.initWithString(
        \\....K...
        \\........
        \\..b..q..
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(true, board.isChecked(.black));
    try std.testing.expectEqual(false, board.canMove(.black));
}

test "black is checked and can move" {
    const board = Board.initWithString(
        \\....K...
        \\.r......
        \\.....n..
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(true, board.isChecked(.black));
    try std.testing.expectEqual(true, board.canMove(.black));
}

test "black is not checked and can move" {
    const board = Board.initWithString(
        \\....K...
        \\.r......
        \\.....p..
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(false, board.isChecked(.black));
    try std.testing.expectEqual(true, board.canMove(.black));
}

test "black is not checked and cannot move" {
    const board = Board.initWithString(
        \\....K...
        \\.r......
        \\.....q..
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(false, board.isChecked(.black));
    try std.testing.expectEqual(false, board.canMove(.black));
}

test "white is checked and cannot move" {
    const board = Board.initWithString(
        \\........
        \\...R.Q..
        \\....k...
        \\....p...
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(true, board.isChecked(.white));
    try std.testing.expectEqual(false, board.canMove(.white));
}

test "white is checked and can move" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\......N.
        \\......pp
        \\......nk
    );

    try std.testing.expectEqual(true, board.isChecked(.white));
    try std.testing.expectEqual(true, board.canMove(.white));
}

test "white is not checked and can move" {
    const board = Board.initWithString(
        \\..n.k.r.
        \\...b.q..
        \\........
        \\....P...
        \\........
        \\........
        \\........
        \\....K...
    );

    try std.testing.expectEqual(false, board.isChecked(.white));
    try std.testing.expectEqual(true, board.canMove(.white));
}

test "get moves: normal moves" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\........
        \\........
        \\........
    );

    const move = board.getMove(BitBoard.initWithCoordinate(3, 3));

    try move.expect(
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\ooo.oooo
        \\...o....
        \\...o....
        \\...o....
    );
}

test "get moves: castling" {
    const board = Board.initWithString(
        \\R...K..R
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    const move = board.getMove(BitBoard.initWithCoordinate(4, 7));

    try move.expect(
        \\o..o.o.o
        \\...ooo..
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "get moves: en passant" {
    var board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\...pPp..
        \\........
        \\........
        \\........
    );
    board.enpassant_target = BitBoard.initWithCoordinate(5, 2);

    const move = board.getMove(BitBoard.initWithCoordinate(4, 3));

    try move.expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....oo..
        \\........
        \\........
    );
}

test "detect promotion move" {
    const board = Board.initWithString(
        \\........
        \\....P...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expect(board.isPromotion(BitBoard.initWithCoordinate(4, 6), BitBoard.initWithCoordinate(4, 7)));
}

test "moved board 1: single pawn" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\........
    );

    const actual = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 2),
        BitBoard.initWithCoordinate(4, 3),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
        \\........
    );
}

test "moved board 2: multiple pawns" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\pppp.ppp
        \\........
    );

    const actual = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 3),
        BitBoard.initWithCoordinate(4, 4),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
        \\oooo.ooo
        \\........
    );
}

test "moved board 3: pawns and other pieces" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\........
        \\pppp.ppp
        \\rnbqkbnr
    );

    const actual = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 4),
        BitBoard.initWithCoordinate(4, 5),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\....o...
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try actual.getBoard(.white, .knight).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.o....o.
    );
}

test "moved board 4: capture" {
    const board = Board.initWithString(
        \\........
        \\..PP....
        \\....p...
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\rnbqkbnr
    );

    const actual = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 5),
        BitBoard.initWithCoordinate(3, 6),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\...o....
        \\........
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try actual.getBoard(.black, .pawn).expect(
        \\........
        \\..o.....
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "moved board 5: rook" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\....r...
    );

    const actual = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 0),
        BitBoard.initWithCoordinate(4, 6),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try actual.getBoard(.white, .rook).expect(
        \\........
        \\....o...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "moved board 6: castling" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\r...k...
    );

    const actual = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 0),
        BitBoard.initWithCoordinate(0, 0),
    );

    try actual.getBoard(.white, .rook).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\...o....
    );

    try actual.getBoard(.white, .king).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\..o.....
    );
}

test "moved board 7: en passant" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\....pPP.
        \\........
        \\........
        \\pppp.ppp
        \\r...k...
    );

    const actual = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 4),
        BitBoard.initWithCoordinate(5, 5),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\.....o..
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try actual.getBoard(.black, .pawn).expect(
        \\........
        \\........
        \\........
        \\......o.
        \\........
        \\........
        \\........
        \\........
    );
}

test "moved board 8: castling rook-moved" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    const result = board.getMovedBoard(
        BitBoard.initWithCoordinate(0, 0),
        BitBoard.initWithCoordinate(0, 3),
    );

    try std.testing.expectEqual(board.castling_available.white_queenside, true);
    try std.testing.expectEqual(board.castling_available.white_kingside, true);
    try std.testing.expectEqual(result.castling_available.white_queenside, false);
    try std.testing.expectEqual(result.castling_available.white_kingside, true);
}

test "moved board 9: castling king-moved" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    const result = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 0),
        BitBoard.initWithCoordinate(4, 1),
    );

    try std.testing.expectEqual(board.castling_available.white_queenside, true);
    try std.testing.expectEqual(board.castling_available.white_kingside, true);
    try std.testing.expectEqual(result.castling_available.white_queenside, false);
    try std.testing.expectEqual(result.castling_available.white_kingside, false);
}

test "moved board 10: castling castled" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    const result = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 0),
        BitBoard.initWithCoordinate(7, 0),
    );

    try std.testing.expectEqual(board.castling_available.white_queenside, true);
    try std.testing.expectEqual(board.castling_available.white_kingside, true);
    try std.testing.expectEqual(result.castling_available.white_queenside, false);
    try std.testing.expectEqual(result.castling_available.white_kingside, false);
}

test "moved board 11: enpassant white" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\.....P..
        \\........
        \\....p...
        \\....k...
    );

    const result = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 1),
        BitBoard.initWithCoordinate(4, 3),
    );

    try std.testing.expectEqual(result.enpassant_target, BitBoard.initWithCoordinate(4, 2));
}

test "moved board 11: enpassant black" {
    const board = Board.initWithString(
        \\....K...
        \\....P...
        \\........
        \\...p....
        \\........
        \\........
        \\........
        \\........
    );

    const result = board.getMovedBoard(
        BitBoard.initWithCoordinate(4, 6),
        BitBoard.initWithCoordinate(4, 4),
    );

    try std.testing.expectEqual(result.enpassant_target, BitBoard.initWithCoordinate(4, 5));
}

test "promotion board 1: white pawn to knight" {
    const board = Board.initWithString(
        \\....p...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    const result = board.getPromotionBoard(BitBoard.initWithCoordinate(4, 7), .knight);

    try result.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
    try result.getBoard(.white, .knight).expect(
        \\....o...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "promotion board 2: black pawn to queen" {
    const board = Board.initWithString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....P...
    );

    const result = board.getPromotionBoard(BitBoard.initWithCoordinate(4, 0), .queen);

    try result.getBoard(.black, .pawn).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
    try result.getBoard(.black, .queen).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
    );
}
