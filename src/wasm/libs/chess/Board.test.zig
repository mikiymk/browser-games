// std import
const std = @import("std");
const builtin = @import("builtin");

// common import
const common = @import("../common/main.zig");
const BitBoard = common.bit_board.BitBoard(8, 8);

// internal import
const main = @import("./main.zig");
const Board = main.Board;
const moves = main.moves;

test "📖Board.fromString: 文字列からボードを初期化する" {
    const board = Board.fromString(
        \\RNBQKBNR
        \\PPPPPPPP
        \\........
        \\........
        \\........
        \\........
        \\pppppppp
        \\rnbqkbnr
    );

    try board.getBoard(.black, .pawn).expect(
        \\........
        \\oooooooo
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try board.getBoard(.white, .rook).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\o......o
    );
}

test "📖Board.filterValidMove: 有効な動きだけをフィルターする" {
    const board_str =
        \\........
        \\...R....
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\...k....
    ;
    const board = Board.fromString(board_str);
    const from = BitBoard.fromString(board_str, 'r');
    const to = moves.rook(board, from, .white);

    const actual = board.filterValidMove(from, to);

    try actual.expect(
        \\........
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\........
        \\........
    );
}

test "📖Board.canCastling: キャスリングができるか判定する" {
    const board = Board.fromString(
        \\R...K..R
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    try std.testing.expect(board.canCastling(.black_king));
    try std.testing.expect(board.canCastling(.black_queen));
    try std.testing.expect(board.canCastling(.white_king));
    try std.testing.expect(board.canCastling(.white_queen));
}

test "📖Board.canCastling: キングが攻撃されている" {
    const board = Board.fromString(
        \\....K..R
        \\........
        \\........
        \\........
        \\....r...
        \\........
        \\........
        \\........
    );

    try std.testing.expect(!board.canCastling(.black_king));
}

test "📖Board.canCastling: 駒が動いた" {
    var board = Board.fromString(
        \\R...K...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....k..r
    );

    board = board.getMovedBoard(BitBoard.fromCoordinate(4, 7), BitBoard.fromCoordinate(4, 6));
    board = board.getMovedBoard(BitBoard.fromCoordinate(7, 0), BitBoard.fromCoordinate(7, 2));

    try std.testing.expect(!board.canCastling(.black_queen));
    try std.testing.expect(!board.canCastling(.white_king));
}

test "📖Board.canCastling: 他の駒が間にある" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\rn..k...
    );

    try std.testing.expect(!board.canCastling(.white_queen));
}

test "📖Board.isChecked: チェックされている" {
    const board = Board.fromString(
        \\........
        \\.....R..
        \\........
        \\.K......
        \\.....k..
        \\........
        \\.q......
        \\........
    );

    try std.testing.expect(board.isChecked(.black));
    try std.testing.expect(board.isChecked(.white));
}

test "📖Board.isChecked: チェックされていない" {
    const board = Board.fromString(
        \\........
        \\......B.
        \\........
        \\...K....
        \\........
        \\........
        \\..q...k.
        \\........
    );

    try std.testing.expect(!board.isChecked(.black));
    try std.testing.expect(!board.isChecked(.white));
}

test "📖Board.canMove: 動けるかどうか" {
    {
        const board = Board.fromString(
            \\....K...
            \\........
            \\..b..q..
            \\........
            \\........
            \\........
            \\........
            \\........
        );

        try std.testing.expect(!board.canMove(.black));
    }

    {
        const board = Board.fromString(
            \\....K...
            \\.r......
            \\.....n..
            \\........
            \\........
            \\........
            \\........
            \\........
        );

        try std.testing.expect(board.canMove(.black));
    }
}

test "📖Board.getMove: 動ける場所を計算する" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\........
        \\........
        \\........
    );

    try board.getMove(BitBoard.fromCoordinate(3, 3)).expect(
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\ooo.oooo
        \\...o....
        \\...o....
        \\...o....
    );
}

test "📖Board.getMove: キャスリング" {
    const board = Board.fromString(
        \\R...K..R
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try board.getMove(BitBoard.fromCoordinate(4, 7)).expect(
        \\o..o.o.o
        \\...ooo..
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "📖Board.getMove: アンパッサン" {
    var board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\...pPp..
        \\........
        \\........
        \\........
    );
    board.enpassant_target = BitBoard.fromCoordinate(5, 2);

    try board.getMove(BitBoard.fromCoordinate(4, 3)).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....oo..
        \\........
        \\........
    );
}

test "📖Board.isPromotion: プロモーションする動きか判定する" {
    const board = Board.fromString(
        \\........
        \\.r..P...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expect(board.isPromotion(BitBoard.fromCoordinate(4, 6), BitBoard.fromCoordinate(4, 7)));
    try std.testing.expect(!board.isPromotion(BitBoard.fromCoordinate(1, 6), BitBoard.fromCoordinate(1, 7)));
}

test "📖Board.getMovedBoard: 動く" {
    const board = Board.init();

    const actual = board.getMovedBoard(
        BitBoard.fromCoordinate(4, 1),
        BitBoard.fromCoordinate(4, 3),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\oooo.ooo
        \\........
    );

    try actual.getBoard(.white, .rook).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\o......o
    );
}

test "📖Board.getMovedBoard: キャプチャ" {
    const board = Board.fromString(
        \\........
        \\..PP....
        \\....p...
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\rnbqkbnr
    );

    const actual = board.getMovedBoard(
        BitBoard.fromCoordinate(4, 5),
        BitBoard.fromCoordinate(3, 6),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\...o....
        \\........
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try actual.getBoard(.black, .pawn).expect(
        \\........
        \\..o.....
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "📖Board.getMovedBoard: キャスリング" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\r...k...
    );

    const actual = board.getMovedBoard(
        BitBoard.fromCoordinate(4, 0),
        BitBoard.fromCoordinate(0, 0),
    );

    try actual.getBoard(.white, .rook).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\...o....
    );

    try actual.getBoard(.white, .king).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\..o.....
    );
}

test "📖Board.getMovedBoard: アンパッサン" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\....pPP.
        \\........
        \\........
        \\pppp.ppp
        \\r...k...
    );

    const actual = board.getMovedBoard(
        BitBoard.fromCoordinate(4, 4),
        BitBoard.fromCoordinate(5, 5),
    );

    try actual.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\.....o..
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try actual.getBoard(.black, .pawn).expect(
        \\........
        \\........
        \\........
        \\......o.
        \\........
        \\........
        \\........
        \\........
    );
}

test "📖Board.getMovedBoard: 駒が動くとキャスリングができなくなる" {
    var board = Board.fromString(
        \\R...K..R
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    try std.testing.expect(board.castling_available.white_queen);
    try std.testing.expect(board.castling_available.white_king);

    board = board.getMovedBoard(BitBoard.fromCoordinate(0, 0), BitBoard.fromCoordinate(0, 3));

    try std.testing.expect(!board.castling_available.white_queen);
    try std.testing.expect(board.castling_available.white_king);

    board = board.getMovedBoard(BitBoard.fromCoordinate(4, 0), BitBoard.fromCoordinate(4, 3));

    try std.testing.expect(!board.castling_available.white_queen);
    try std.testing.expect(!board.castling_available.white_king);

    try std.testing.expect(board.castling_available.black_queen);
    try std.testing.expect(board.castling_available.black_king);

    board = board.getMovedBoard(BitBoard.fromCoordinate(4, 7), BitBoard.fromCoordinate(7, 7));

    try std.testing.expect(!board.castling_available.black_queen);
    try std.testing.expect(!board.castling_available.black_king);
}

test "📖Board.getMovedBoard: ポーンが2個進むとアンパッサン対象になる" {
    var board = Board.fromString(
        \\........
        \\...P....
        \\........
        \\..p.....
        \\.....P..
        \\........
        \\....p...
        \\........
    );

    board = board.getMovedBoard(BitBoard.fromCoordinate(4, 1), BitBoard.fromCoordinate(4, 3));

    try std.testing.expectEqual(board.enpassant_target, BitBoard.fromCoordinate(4, 2));

    board = board.getMovedBoard(BitBoard.fromCoordinate(3, 6), BitBoard.fromCoordinate(3, 4));

    try std.testing.expectEqual(board.enpassant_target, BitBoard.fromCoordinate(3, 5));
}

test "📖Board.getPromotionBoard: ポーンがプロモーションする" {
    var board = Board.fromString(
        \\....p...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....P...
    );

    board = board.getPromotionBoard(BitBoard.fromCoordinate(4, 7), .knight);
    board = board.getPromotionBoard(BitBoard.fromCoordinate(4, 0), .queen);

    try board.getBoard(.white, .pawn).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
    try board.getBoard(.white, .knight).expect(
        \\....o...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try board.getBoard(.black, .pawn).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
    try board.getBoard(.black, .queen).expect(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
    );
}
