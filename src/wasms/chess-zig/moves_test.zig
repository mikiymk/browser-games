const std = @import("std");

const bit_board = @import("bit-board");
const Board = @import("Board.zig");
const moves = @import("moves.zig");

const TestCase = struct {
    desc: []const u8,
    board: []const u8,
    expect_move_places: []const u8,
};

const black_pawn_cases = [_]TestCase{
    .{
        .desc = "first, move front 1 or 2",
        .board =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....P...
        \\........
        ,
        .expect_move_places =
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\....o...
        \\........
        \\........
        ,
    },
    .{
        .desc = "second or after, move front 1",
        .board =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....P...
        \\........
        \\........
        ,
        .expect_move_places =
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
        \\........
        ,
    },
    .{
        .desc = "if front ally, cannot move",
        .board =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....N...
        \\....P...
        \\........
        ,
        .expect_move_places =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        ,
    },
    .{
        .desc = "if front enemy, cannot move",
        .board =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....n...
        \\....P...
        \\........
        ,
        .expect_move_places =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        ,
    },
    .{
        .desc = "if left or right front enemy, can capture it",
        .board =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\...nbr..
        \\....P...
        \\........
        ,
        .expect_move_places =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\...o.o..
        \\........
        \\........
        ,
    },
    .{
        .desc = "multiple pawn moves",
        .board =
        \\........
        \\........
        \\........
        \\......n.
        \\.....P..
        \\....P...
        \\PPPP..PP
        \\........
        ,
        .expect_move_places =
        \\........
        \\........
        \\........
        \\.....oo.
        \\ooooo.oo
        \\oooo..oo
        \\........
        \\........
        ,
    },
};

test "black pawn" {
    var has_fail = false;

    inline for (black_pawn_cases) |case| {
        const board = Board.fromString(case.board);
        const pos = bit_board.fromString(case.board, 'P');

        const pawnmove = moves.pawnBlack(board, pos);

        bit_board.expectBitBoard(pawnmove, case.expect_move_places) catch {
            std.debug.print("test failed: {s}\n", .{case.desc});

            has_fail = true;
        };
    }

    if (has_fail) {
        return error.OneOrMoreTestCasesFailed;
    }
}

test "get white pawn's move 1: first move" {
    const board_str =
        \\........
        \\....p...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'p');

    const pawnmove = moves.pawnWhite(board, pos);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\....o...
        \\....o...
        \\........
        \\........
        \\........
        \\........
    );
}

test "get white pawn's move 2: front ally" {
    const board_str =
        \\........
        \\....p...
        \\....n...
        \\........
        \\........
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'p');

    const pawnmove = moves.pawnWhite(board, pos);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "get white pawn's move 3: front enemy" {
    const board_str =
        \\........
        \\....p...
        \\....N...
        \\........
        \\........
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'p');

    const pawnmove = moves.pawnWhite(board, pos);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "get white pawn's move 4: diagonal piece" {
    const board_str =
        \\........
        \\........
        \\........
        \\....p...
        \\...n.N..
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'p');

    const pawnmove = moves.pawnWhite(board, pos);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\........
        \\....oo..
        \\........
        \\........
        \\........
    );
}

test "get white pawn's move 5: multiple pawns" {
    const board_str =
        \\........
        \\.pp.....
        \\...p....
        \\........
        \\........
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'p');

    const pawnmove = moves.pawnWhite(board, pos);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\.oo.....
        \\.ooo....
        \\........
        \\........
        \\........
        \\........
    );
}

test "get knight's move 1: center" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.....n..
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'n');

    const pawnmove = moves.knight(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\....o.o.
        \\...o...o
        \\........
        \\...o...o
        \\....o.o.
    );
}

test "get knight's move 2: close to edge" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\......n.
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'n');

    const pawnmove = moves.knight(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\.....o.o
        \\....o...
        \\........
        \\....o...
        \\.....o.o
    );
}

test "get knight's move 3: edge" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.......n
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'n');

    const pawnmove = moves.knight(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\......o.
        \\.....o..
        \\........
        \\.....o..
        \\......o.
    );
}

test "get knight's move 4: with other pieces" {
    const board_str =
        \\........
        \\........
        \\...Q.q..
        \\..b...P.
        \\....n...
        \\..B...p.
        \\...r.R..
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'n');

    const pawnmove = moves.knight(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\...o....
        \\......o.
        \\........
        \\..o.....
        \\.....o..
        \\........
    );
}

test "get knight's move 5: multiple knights" {
    const board_str =
        \\........
        \\........
        \\........
        \\...n....
        \\....n...
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'n');

    const pawnmove = moves.knight(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\..o.o...
        \\.o.o.o..
        \\..o...o.
        \\.o...o..
        \\..o.o.o.
        \\...o.o..
        \\........
    );
}

test "get bishop's move 1: center" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\....b...
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'b');

    const pawnmove = moves.bishop(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\o.......
        \\.o.....o
        \\..o...o.
        \\...o.o..
        \\........
        \\...o.o..
        \\..o...o.
        \\.o.....o
    );
}

test "get bishop's move 2: corner" {
    const board_str =
        \\b.......
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'b');

    const pawnmove = moves.bishop(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\.o......
        \\..o.....
        \\...o....
        \\....o...
        \\.....o..
        \\......o.
        \\.......o
    );
}

test "get bishop's move 3: with other pieces" {
    const board_str =
        \\........
        \\........
        \\..n...N.
        \\........
        \\....b...
        \\........
        \\..R...r.
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'b');

    const pawnmove = moves.bishop(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\......o.
        \\...o.o..
        \\........
        \\...o.o..
        \\..o.....
        \\........
    );
}

test "get bishop's move 4: multiple bishops" {
    const board_str =
        \\........
        \\........
        \\........
        \\....b...
        \\....b...
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'b');

    const pawnmove = moves.bishop(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\oo.....o
        \\.oo...oo
        \\..oo.oo.
        \\...o.o..
        \\...o.o..
        \\..oo.oo.
        \\.oo...oo
        \\oo.....o
    );
}

test "get bishop's move 5: next to piece" {
    const board_str =
        \\........
        \\........
        \\........
        \\...p.P..
        \\....b...
        \\...n.N..
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'b');

    const pawnmove = moves.bishop(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\.....o..
        \\........
        \\.....o..
        \\........
        \\........
    );
}

test "get rook's move 1: center" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\....r...
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'r');

    const pawnmove = moves.rook(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\....o...
        \\....o...
        \\....o...
        \\....o...
        \\oooo.ooo
        \\....o...
        \\....o...
        \\....o...
    );
}

test "get rook's move 2: edge" {
    const board_str =
        \\........
        \\........
        \\........
        \\r.......
        \\........
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'r');

    const pawnmove = moves.rook(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\o.......
        \\o.......
        \\o.......
        \\.ooooooo
        \\o.......
        \\o.......
        \\o.......
        \\o.......
    );
}

test "get rook's move 3: with other pieces" {
    const board_str =
        \\........
        \\........
        \\....N...
        \\........
        \\..n.r.b.
        \\........
        \\....B...
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'r');

    const pawnmove = moves.rook(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\....o...
        \\....o...
        \\...o.o..
        \\....o...
        \\....o...
        \\........
    );
}

test "get rook's move 4: multiple rooks" {
    const board_str =
        \\........
        \\........
        \\..r.....
        \\........
        \\........
        \\.....r..
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'r');

    const pawnmove = moves.rook(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\..o..o..
        \\..o..o..
        \\oo.ooooo
        \\..o..o..
        \\..o..o..
        \\ooooo.oo
        \\..o..o..
        \\..o..o..
    );
}

test "get rook's move 5: next to piece" {
    const board_str =
        \\........
        \\........
        \\........
        \\....p...
        \\...nrP..
        \\....N...
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'r');

    const pawnmove = moves.rook(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\........
        \\.....o..
        \\....o...
        \\........
        \\........
    );
}

test "get queen's move 1: center" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\....q...
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'q');

    const pawnmove = moves.queen(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\o...o...
        \\.o..o..o
        \\..o.o.o.
        \\...ooo..
        \\oooo.ooo
        \\...ooo..
        \\..o.o.o.
        \\.o..o..o
    );
}

test "get queen's move 2: edge" {
    const board_str =
        \\........
        \\........
        \\........
        \\q.......
        \\........
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'q');

    const pawnmove = moves.queen(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\o..o....
        \\o.o.....
        \\oo......
        \\.ooooooo
        \\oo......
        \\o.o.....
        \\o..o....
        \\o...o...
    );
}

test "get queen's move 3: with other pieces" {
    const board_str =
        \\........
        \\........
        \\..N.b.B.
        \\........
        \\..n.q.r.
        \\........
        \\..P.p.R.
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'q');

    const pawnmove = moves.queen(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\..o...o.
        \\...ooo..
        \\...o.o..
        \\...ooo..
        \\..o...o.
        \\........
    );
}

test "get queen's move 4: multiple queens" {
    const board_str =
        \\........
        \\........
        \\.....q..
        \\........
        \\........
        \\........
        \\...q....
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'q');

    const pawnmove = moves.queen(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\...o.o.o
        \\...oooo.
        \\ooooo.oo
        \\o..oooo.
        \\.o.o.o.o
        \\..oooo..
        \\ooo.oooo
        \\o.oooo..
    );
}

test "get queen's move 5: next to piece" {
    const board_str =
        \\........
        \\........
        \\........
        \\...brR..
        \\...Bqp..
        \\...nNP..
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'q');

    const pawnmove = moves.queen(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\.....o..
        \\...o....
        \\....oo..
        \\........
        \\........
    );
}

test "get king's move 1: center" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\....k...
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'k');

    const pawnmove = moves.king(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\...ooo..
        \\...o.o..
        \\...ooo..
        \\........
        \\........
    );
}

test "get knight's move 2: edge" {
    const board_str =
        \\........
        \\........
        \\........
        \\........
        \\k.......
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'k');

    const pawnmove = moves.king(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\oo......
        \\.o......
        \\oo......
        \\........
        \\........
    );
}

test "get knight's move 3: with other pieces" {
    const board_str =
        \\........
        \\........
        \\........
        \\...BRr..
        \\...bkp..
        \\...nNP..
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'k');

    const pawnmove = moves.king(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\........
        \\........
        \\........
        \\...oo...
        \\........
        \\....oo..
        \\........
        \\........
    );
}

test "get knight's move 4: multiple kings" {
    const board_str =
        \\........
        \\..k.....
        \\........
        \\........
        \\....k...
        \\........
        \\........
        \\........
    ;

    const board = Board.fromString(board_str);
    const pos = bit_board.fromString(board_str, 'k');

    const pawnmove = moves.king(board, pos, .white);

    try bit_board.expectBitBoard(pawnmove,
        \\.ooo....
        \\.o.o....
        \\.ooo....
        \\...ooo..
        \\...o.o..
        \\...ooo..
        \\........
        \\........
    );
}
