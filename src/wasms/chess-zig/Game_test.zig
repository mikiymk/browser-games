const std = @import("std");
const testing = std.testing;
const bit_board = @import("bit-board");
const Game = @import("Game.zig");
const Board = @import("Board.zig");

const allocator = testing.allocator_instance.allocator();

test "get moves: normal moves" {
    var game = Game.init(allocator);

    game.board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\........
        \\........
        \\........
    );

    const moves = game.getMove(bit_board.fromNotation("d4"));

    try testing.expectEqual(bit_board.fromString(
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\ooo.oooo
        \\...o....
        \\...o....
        \\...o....
    , 'o'), moves);
}

test "get moves: castling" {
    var game = Game.init(allocator);

    game.board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\R...K..R
    );

    const moves = game.getMove(bit_board.fromNotation("e1"));

    try testing.expectEqual(bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\...ooo..
        \\o..o.o.o
    , 'o'), moves);
}

test "get moves: en passant" {
    var game = Game.init(allocator);

    game.board = Board.fromString(
        \\........
        \\........
        \\........
        \\...pPp..
        \\........
        \\........
        \\........
        \\........
    );
    game.next_color = .black;
    game.enpassant_target = bit_board.fromNotation("f6");

    const moves = game.getMove(bit_board.fromNotation("e5"));

    try bit_board.expectBitBoard(moves,
        \\........
        \\........
        \\....oo..
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "detect promotion move" {
    var game = Game.init(allocator);

    game.board = Board.fromString(
        \\........
        \\....P...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try testing.expectEqual(game.isPromotion(bit_board.fromNotation("e7"), bit_board.fromNotation("e8")), true);
}
