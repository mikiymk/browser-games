const std = @import("std");
const bit_board = @import("bit-board");
const moves = @import("moves.zig");
const Board = @import("Board.zig");

test "chess board from string" {
    const board = Board.fromString(
        \\RNBQKBNR
        \\PPPPPPPP
        \\........
        \\........
        \\........
        \\........
        \\pppppppp
        \\rnbqkbnr
    );

    try bit_board.expectBitBoard(board.black_pawn,
        \\........
        \\oooooooo
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try bit_board.expectBitBoard(board.white_rook,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\o......o
    );
}

test "filter check move" {
    const board_str =
        \\........
        \\...R....
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\...k....
    ;
    const board = Board.fromString(board_str);
    const from = bit_board.fromString(board_str, 'r');
    const to = moves.rook(board, from, .white);

    const actual = board.filterValidMove(from, to);

    try bit_board.expectBitBoard(actual,
        \\........
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\........
        \\........
    );
}

test "castling black kingside" {
    const board = Board.fromString(
        \\....K..R
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_king), true);
}

test "castling black queenside" {
    const board = Board.fromString(
        \\R...K...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_queen), true);
}

test "castling white kingside" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....k..r
    );

    try std.testing.expectEqual(board.canCastling(.white_king), true);
}

test "castling white queenside" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k...
    );

    try std.testing.expectEqual(board.canCastling(.white_queen), true);
}

test "castling attacked king" {
    const board = Board.fromString(
        \\....K..R
        \\........
        \\........
        \\........
        \\....r...
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_king), false);
}

test "castling moved king" {
    const board = Board.fromString(
        \\R.......
        \\....K...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.black_queen), false);
}

test "castling moved rook" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.......r
        \\........
        \\....k...
    );

    try std.testing.expectEqual(board.canCastling(.white_king), false);
}

test "castling piece between king and rook" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\rn..k...
    );

    try std.testing.expectEqual(board.canCastling(.white_queen), false);
}

test "black king is checked" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\...K....
        \\........
        \\........
        \\...q....
        \\........
    );

    const actual = board.isChecked(.black);
    const expected = true;

    try std.testing.expect(actual == expected);
}

test "black king is not checked" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\...K....
        \\........
        \\........
        \\..q.....
        \\........
    );

    const actual = board.isChecked(.black);
    const expected = false;

    try std.testing.expect(actual == expected);
}

test "white king is checked" {
    const board = Board.fromString(
        \\........
        \\...R....
        \\........
        \\........
        \\........
        \\........
        \\...k....
        \\........
    );

    const actual = board.isChecked(.white);
    const expected = true;

    try std.testing.expect(actual == expected);
}

test "white king is not checked" {
    const board = Board.fromString(
        \\........
        \\..R.....
        \\........
        \\........
        \\........
        \\........
        \\...k....
        \\........
    );

    const actual = board.isChecked(.white);
    const expected = false;

    try std.testing.expect(actual == expected);
}

test "black king is checkmate" {
    const board = Board.fromString(
        \\....K...
        \\........
        \\..b..q..
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(true, board.isCheckmate(.black));
}

test "black king is check but not checkmate" {
    const board = Board.fromString(
        \\....K...
        \\.r......
        \\.....n..
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(false, board.isCheckmate(.black));
}

test "black king is not check" {
    const board = Board.fromString(
        \\....K...
        \\.r......
        \\.....p..
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(false, board.isCheckmate(.black));
}

test "white king is checkmate" {
    const board = Board.fromString(
        \\........
        \\...R.Q..
        \\....k...
        \\....p...
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(true, board.isCheckmate(.white));
}

test "white king is check but not checkmate" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\......N.
        \\......pp
        \\......nk
    );

    try std.testing.expectEqual(false, board.isCheckmate(.white));
}

test "white king is not check" {
    const board = Board.fromString(
        \\..n.k.r.
        \\...b.q..
        \\........
        \\....P...
        \\........
        \\........
        \\........
        \\....K...
    );

    try std.testing.expectEqual(false, board.isCheckmate(.white));
}

test "get moves: normal moves" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\........
        \\........
        \\........
    );

    const move = board.getMove(bit_board.fromNotation("d4"));

    try bit_board.expectBitBoard(move,
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\ooo.oooo
        \\...o....
        \\...o....
        \\...o....
    );
}

test "get moves: castling" {
    const board = Board.fromString(
        \\R...K..R
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    const move = board.getMove(bit_board.fromNotation("e8"));

    try bit_board.expectBitBoard(move,
        \\o..o.o.o
        \\...ooo..
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "get moves: en passant" {
    var board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\...pPp..
        \\........
        \\........
        \\........
    );
    board.enpassant_target = bit_board.fromNotation("f3");

    const move = board.getMove(bit_board.fromNotation("e4"));

    try bit_board.expectBitBoard(move,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....oo..
        \\........
        \\........
    );
}

test "detect promotion move" {
    const board = Board.fromString(
        \\........
        \\....P...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.isPromotion(bit_board.fromNotation("e7"), bit_board.fromNotation("e8")), true);
}

test "moved board 1: single pawn" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\........
    );

    const actual = board.getMovedBoard(
        bit_board.fromNotation("e3"),
        bit_board.fromNotation("e4"),
    );

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
        \\........
    );
}

test "moved board 2: multiple pawns" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\pppp.ppp
        \\........
    );

    const actual = board.getMovedBoard(
        bit_board.fromNotation("e4"),
        bit_board.fromNotation("e5"),
    );

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
        \\oooo.ooo
        \\........
    );
}

test "moved board 3: pawns and other pieces" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\........
        \\pppp.ppp
        \\rnbqkbnr
    );

    const actual = board.getMovedBoard(
        bit_board.fromNotation("e5"),
        bit_board.fromNotation("e6"),
    );

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\........
        \\....o...
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try bit_board.expectBitBoard(actual.white_knight,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.o....o.
    );
}

test "moved board 4: capture" {
    const board = Board.fromString(
        \\........
        \\..PP....
        \\....p...
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\rnbqkbnr
    );

    const actual = board.getMovedBoard(
        bit_board.fromNotation("e6"),
        bit_board.fromNotation("d7"),
    );

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\...o....
        \\........
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try bit_board.expectBitBoard(actual.black_pawn,
        \\........
        \\..o.....
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "moved board 5: rook" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\....r...
    );

    const actual = board.getMovedBoard(
        bit_board.fromNotation("e1"),
        bit_board.fromNotation("e7"),
    );

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try bit_board.expectBitBoard(actual.white_rook,
        \\........
        \\....o...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "moved board 6: castling" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\pppp.ppp
        \\r...k...
    );

    const actual = board.getMovedBoard(
        bit_board.fromNotation("e1"),
        bit_board.fromNotation("a1"),
    );

    try bit_board.expectBitBoard(actual.white_rook,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\...o....
    );

    try bit_board.expectBitBoard(actual.white_king,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\..o.....
    );
}

test "moved board 7: en passant" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\....pPP.
        \\........
        \\........
        \\pppp.ppp
        \\r...k...
    );

    const actual = board.getMovedBoard(
        bit_board.fromNotation("e5"),
        bit_board.fromNotation("f6"),
    );

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\........
        \\.....o..
        \\........
        \\........
        \\........
        \\oooo.ooo
        \\........
    );

    try bit_board.expectBitBoard(actual.black_pawn,
        \\........
        \\........
        \\........
        \\......o.
        \\........
        \\........
        \\........
        \\........
    );
}

test "moved board 8: castling rook-moved" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    const result = board.getMovedBoard(
        bit_board.fromNotation("a1"),
        bit_board.fromNotation("a4"),
    );

    try std.testing.expectEqual(board.castling_available.white_queenside, true);
    try std.testing.expectEqual(board.castling_available.white_kingside, true);
    try std.testing.expectEqual(result.castling_available.white_queenside, false);
    try std.testing.expectEqual(result.castling_available.white_kingside, true);
}

test "moved board 9: castling king-moved" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    const result = board.getMovedBoard(
        bit_board.fromNotation("e1"),
        bit_board.fromNotation("e2"),
    );

    try std.testing.expectEqual(board.castling_available.white_queenside, true);
    try std.testing.expectEqual(board.castling_available.white_kingside, true);
    try std.testing.expectEqual(result.castling_available.white_queenside, false);
    try std.testing.expectEqual(result.castling_available.white_kingside, false);
}

test "moved board 10: castling castled" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\r...k..r
    );

    const result = board.getMovedBoard(
        bit_board.fromNotation("e1"),
        bit_board.fromNotation("h1"),
    );

    try std.testing.expectEqual(board.castling_available.white_queenside, true);
    try std.testing.expectEqual(board.castling_available.white_kingside, true);
    try std.testing.expectEqual(result.castling_available.white_queenside, false);
    try std.testing.expectEqual(result.castling_available.white_kingside, false);
}

test "moved board 11: enpassant white" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\.....P..
        \\........
        \\....p...
        \\....k...
    );

    const result = board.getMovedBoard(
        bit_board.fromNotation("e2"),
        bit_board.fromNotation("e4"),
    );

    try std.testing.expectEqual(result.enpassant_target, bit_board.fromNotation("e3"));
}

test "moved board 11: enpassant black" {
    const board = Board.fromString(
        \\....K...
        \\....P...
        \\........
        \\...p....
        \\........
        \\........
        \\........
        \\........
    );

    const result = board.getMovedBoard(
        bit_board.fromNotation("e7"),
        bit_board.fromNotation("e5"),
    );

    try std.testing.expectEqual(result.enpassant_target, bit_board.fromNotation("e6"));
}

test "promotion board 1: white pawn to knight" {
    const board = Board.fromString(
        \\....p...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    const result = board.getPromotionBoard(bit_board.fromNotation("e8"), .knight);

    try bit_board.expectBitBoard(result.white_pawn,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
    try bit_board.expectBitBoard(result.white_knight,
        \\....o...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "promotion board 2: black pawn to queen" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....P...
    );

    const result = board.getPromotionBoard(bit_board.fromNotation("e1"), .queen);

    try bit_board.expectBitBoard(result.black_pawn,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
    try bit_board.expectBitBoard(result.black_queen,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
    );
}
