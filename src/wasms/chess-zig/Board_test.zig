const std = @import("std");
const bit_board = @import("bit-board");
const moves = @import("moves.zig");
const Board = @import("Board.zig");

test "chess board from string" {
    const board = Board.fromString(
        \\rnbqkbnr
        \\pppppppp
        \\........
        \\........
        \\........
        \\........
        \\PPPPPPPP
        \\RNBQKBNR
    );

    try bit_board.expectBitBoard(board.black_pawn,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\oooooooo
        \\........
    );

    try bit_board.expectBitBoard(board.white_rook,
        \\o......o
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "filter check move" {
    const board_str =
        \\........
        \\...R....
        \\........
        \\........
        \\........
        \\........
        \\...r....
        \\...k....
    ;
    const board = Board.fromString(board_str);
    const from = bit_board.fromString(board_str, 'r');
    const to = moves.rook(board, from, .white);

    const actual = board.filterValidMove(from, to, .white, .rook);

    try bit_board.expectBitBoard(actual,
        \\........
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\...o....
        \\........
        \\........
    );
}

test "castling black kingside" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....K..R
    );

    try std.testing.expectEqual(board.canCastling(.black_king), true);
}

test "castling black queenside" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\R...K...
    );

    try std.testing.expectEqual(board.canCastling(.black_queen), true);
}

test "castling white kingside" {
    const board = Board.fromString(
        \\....k..r
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.white_king), true);
}

test "castling white queenside" {
    const board = Board.fromString(
        \\r...k...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.white_queen), true);
}

test "castling attacked king" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\....r...
        \\........
        \\........
        \\........
        \\....K..R
    );

    try std.testing.expectEqual(board.canCastling(.black_king), false);
}

test "castling moved king" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....K...
        \\R.......
    );

    try std.testing.expectEqual(board.canCastling(.black_queen), false);
}

test "castling moved rook" {
    const board = Board.fromString(
        \\....k...
        \\........
        \\.......r
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.white_king), false);
}

test "castling piece between king and rook" {
    const board = Board.fromString(
        \\rn..k...
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(board.canCastling(.white_queen), false);
}

test "black king is checked" {
    const board = Board.fromString(
        \\........
        \\...q....
        \\........
        \\........
        \\...K....
        \\........
        \\........
        \\........
    );

    const actual = board.isChecked(.black);
    const expected = true;

    try std.testing.expect(actual == expected);
}

test "black king is not checked" {
    const board = Board.fromString(
        \\........
        \\..q.....
        \\........
        \\........
        \\...K....
        \\........
        \\........
        \\........
    );

    const actual = board.isChecked(.black);
    const expected = false;

    try std.testing.expect(actual == expected);
}

test "white king is checked" {
    const board = Board.fromString(
        \\........
        \\...R....
        \\........
        \\........
        \\........
        \\........
        \\...k....
        \\........
    );

    const actual = board.isChecked(.white);
    const expected = true;

    try std.testing.expect(actual == expected);
}

test "white king is not checked" {
    const board = Board.fromString(
        \\........
        \\..R.....
        \\........
        \\........
        \\........
        \\........
        \\...k....
        \\........
    );

    const actual = board.isChecked(.white);
    const expected = false;

    try std.testing.expect(actual == expected);
}

test "black king is checkmate" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\..b..q..
        \\........
        \\....K...
    );

    try std.testing.expectEqual(true, board.isCheckmate(.black));
}

test "black king is check but not checkmate" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.....n..
        \\.r......
        \\....K...
    );

    try std.testing.expectEqual(false, board.isCheckmate(.black));
}

test "black king is not check" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\.....p..
        \\.r......
        \\....K...
    );

    try std.testing.expectEqual(false, board.isCheckmate(.black));
}

test "white king is checkmate" {
    const board = Board.fromString(
        \\........
        \\...R.Q..
        \\....k...
        \\....p...
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(true, board.isCheckmate(.white));
}

test "white king is check but not checkmate" {
    const board = Board.fromString(
        \\......nk
        \\......pp
        \\......N.
        \\........
        \\........
        \\........
        \\........
        \\........
    );

    try std.testing.expectEqual(false, board.isCheckmate(.white));
}

test "white king is not check" {
    const board = Board.fromString(
        \\..n.k.r.
        \\...b.q..
        \\........
        \\....P...
        \\........
        \\........
        \\........
        \\....K...
    );

    try std.testing.expectEqual(false, board.isCheckmate(.white));
}

test "moved board 1: single pawn" {
    const board = Board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\........
    );

    const from = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
    , 'o');

    const to = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
    , 'o');

    const actual = board.getMovedBoard(from, to, .white, .pawn);

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
    );
}

test "moved board 2: multiple pawns" {
    const board = Board.fromString(
        \\........
        \\pppp.ppp
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\........
    );

    const from = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
    , 'o');

    const to = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
    , 'o');

    const actual = board.getMovedBoard(from, to, .white, .pawn);

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\oooo.ooo
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
    );
}

test "moved board 3: pawns and other pieces" {
    const board = Board.fromString(
        \\rnbqkbnr
        \\pppp.ppp
        \\........
        \\........
        \\........
        \\....p...
        \\........
        \\........
    );

    const from = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
    , 'o');

    const to = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
    , 'o');

    const actual = board.getMovedBoard(from, to, .white, .pawn);

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\oooo.ooo
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
    );

    try bit_board.expectBitBoard(actual.white_knight,
        \\.o....o.
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
    );
}

test "moved board 4: capture" {
    const board = Board.fromString(
        \\rnbqkbnr
        \\pppp.ppp
        \\........
        \\........
        \\........
        \\....p...
        \\..PP....
        \\........
    );

    const from = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\....o...
        \\........
        \\........
    , 'o');

    const to = bit_board.fromString(
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\...o....
        \\........
    , 'o');

    const actual = board.getMovedBoard(from, to, .white, .pawn);

    try bit_board.expectBitBoard(actual.white_pawn,
        \\........
        \\oooo.ooo
        \\........
        \\........
        \\........
        \\........
        \\...o....
        \\........
    );

    try bit_board.expectBitBoard(actual.black_pawn,
        \\........
        \\........
        \\........
        \\........
        \\........
        \\........
        \\..o.....
        \\........
    );
}
